#!/usr/bin/env python3

# Copyright (C) 2017 Simon Poirier <simpoir@gmail.com>
#
# This program is distributed under the WTFPL

import collections
import ctypes
import dbus
import dbus.service
import enum
import logging
import os
import re

from dbus.mainloop.glib import DBusGMainLoop
from gi.repository import GLib

LOG_LEVEL = logging.DEBUG

LOG = logging.getLogger('xmms2-mpris')
MPRIS_IFACE = 'org.mpris.MediaPlayer2'
MPRIS_PLAYER_IFACE = 'org.mpris.MediaPlayer2.Player'
MPRIS_TRACKLIST_IFACE = 'org.mpris.MediaPlayer2.TrackList'
MPRIS_PLAYLIST_IFACE = 'org.mpris.MediaPlayer2.PlayList'
xmmsc = ctypes.CDLL("libxmmsclient.so.6")

_cb = []


class Status(enum.Enum):
    Stopped = 0
    Playing = 1
    Paused = 2


class xmmsv_t(ctypes.Structure):
    pass


def result_callback(f):

    @ctypes.CFUNCTYPE(ctypes.c_int32, ctypes.POINTER(xmmsv_t), ctypes.c_void_p)
    def wrapper(v, _):
        f(Value(v).value)
        return 1

    _cb.append(wrapper)
    return wrapper


class Client:

    def __init__(self, name="xmms2-mpris2"):
        super().__init__()
        self._c = xmmsc.xmmsc_init(name)

    def __del__(self):
        xmmsc.xmmsc_unref(self._c)

    def connect(self, dst=None):
        if dst is None:
            dst = '/tmp/xmms-ipc-' + os.getlogin()
        dst = dst.encode('utf-8')
        success = xmmsc.xmmsc_connect(self._c, dst)
        if not success:
            raise XmmsConnectionError("connection error")

    def io_handle(self):
        if xmmsc.xmmsc_io_want_out(self._c):
            xmmsc.xmmsc_io_out_handle(self._c)

        xmmsc.xmmsc_io_in_handle(self._c)
        return True

    def __getattribute__(self, name):
        try:
            return super().__getattribute__(name)
        except AttributeError:
            attr_name = "xmmsc_" + name
            func = getattr(xmmsc, attr_name)
            LOG.debug(attr_name)
            return lambda *a: Result(func(self._c, *a))


class Result:

    def __init__(self, _res):
        super().__init__()
        self._r = _res

    def __del__(self):
        xmmsc.xmmsc_result_unref(self._r)

    def wait(self):
        xmmsc.xmmsc_result_wait(self._r)
        return self

    def notifier_set(self, cb):
        wrapped = result_callback(cb)
        _cb.append(wrapped)
        xmmsc.xmmsc_result_notifier_set(self._r, wrapped, None)

    def get_value(self):
        return Value(xmmsc.xmmsc_result_get_value(self._r)).value

    def __getattribute__(self, name):
        try:
            return super().__getattribute__(name)
        except AttributeError:
            attr_name = "xmmsc_result_" + name
            func = getattr(xmmsc, attr_name)
            return lambda *a: func(self._r, *a)


class XmmsException(Exception):
    pass


class XmmsConnectionError(XmmsException):
    pass


class Value:

    class Type(enum.Enum):
        NONE = 0
        ERROR = 1
        INT32 = 2
        STRING = 3
        COLL = 4
        BIN = 5
        LIST = 6
        DICT = 7

    def __init__(self, _val):
        super().__init__()
        self._v = _val

    @property
    def value(self):
        return self._val(self._v)

    @classmethod
    def _val(cls, v):
        type_ = Value.Type(xmmsc.xmmsv_get_type(v))
        if type_ == cls.Type.NONE:
            return
        if type_ == cls.Type.DICT:
            return cls._pydict(v)
        if type_ == cls.Type.LIST:
            return cls._pylist(v)

        handlers = {
            Value.Type.ERROR: (ctypes.c_char_p, xmmsc.xmmsv_get_error),
            Value.Type.INT32: (ctypes.c_int32, xmmsc.xmmsv_get_int),
            Value.Type.STRING: (ctypes.c_char_p, xmmsc.xmmsv_get_string),
        }
        res_t, converter = handlers[type_]
        res = res_t()
        success = converter(v, ctypes.byref(res))
        if not success:
            raise RuntimeError("can't extract value")

        if type_ == Value.Type.ERROR:
            raise XmmsException(res.value.decode("utf-8"))

        res = res.value
        if isinstance(res, bytes):
            return res.decode("utf-8")
        return res

    @staticmethod
    def _pylist(value):
        ret = []

        @ctypes.CFUNCTYPE(None, ctypes.c_voidp, ctypes.c_void_p)
        def append(v, _):
            ret.append(Value(v).value)

        xmmsc.xmmsv_list_foreach(value, append, None)
        return ret

    @staticmethod
    def _pydict(value):
        ret = collections.OrderedDict()

        @ctypes.CFUNCTYPE(None, ctypes.c_char_p, ctypes.c_voidp,
                          ctypes.c_void_p)
        def append(k, v, _):
            ret[k.decode('utf-8')] = Value(v).value

        xmmsc.xmmsv_dict_foreach(value, append, None)
        return ret


class MediaPlayer(dbus.service.Object):

    def __init__(self):
        bus_name = dbus.service.BusName(
            'org.mpris.MediaPlayer2.xmms2', bus=dbus.SessionBus())
        dbus.service.Object.__init__(self, bus_name, '/org/mpris/MediaPlayer2')

        self.cli = Client()
        self.cli.connect()

        self._props = {
            MPRIS_IFACE: dict(
                CanQuit=True,
                CanRaise=False,
                CanSetFullscreen=False,
                # DesktopEntry (optional)
                Fullscreen=False,
                HasTrackList=False,
                Identity="xmms2",
                SupportedUriSchemes=self.supported_uri_schemes,
                SupportedMimeTypes=self.supported_mime, ),
            MPRIS_PLAYER_IFACE: dict(
                PlaybackStatus=self.playback_status,
                LoopStatus="None",
                Rate=1.0,
                Shuffle=False,
                Metadata=self.metadata(),
                Volume=self.volume,
                Position=self.position,
                MinimumRate=1.0,
                MaximumRate=1.0,
                CanGoNext=self.can_go_next,
                CanGoPrevious=self.can_go_previous,
                CanPlay=self.has_track,
                CanPause=self.has_track,
                CanSeek=True,
                CanControl=True, ),
        }

        self.cli.broadcast_playback_status().notifier_set(self.on_status)
        self.cli.signal_playback_playtime().notifier_set(self.on_playtime)
        self.cli.broadcast_playback_current_id().notifier_set(
            self.on_track_change)
        self.cli.broadcast_playback_volume_changed().notifier_set(
            self.on_volume_change)
        self.cli.broadcast_quit().notifier_set(self.on_quit)

    @property
    def supported_uri_schemes(self):
        conf = self.cli.config_list_values().wait().get_value()
        return sorted({
            k.split(':')[1]
            for k in conf if '.priority.application/x-url:' in k
        })

    @property
    def supported_mime(self):
        conf = self.cli.config_list_values().wait().get_value()
        mimes = set()
        for k in conf:
            match = re.match(r"^\w+\.priority\.(\w+/[a-z]+)$", k)
            if match:
                mimes.add(match.groups()[0])
        return sorted(mimes)

    def on_playtime(self, v):
        self.Set(MPRIS_PLAYER_IFACE, "Position", v * 1000)

    def on_status(self, v):
        name = Status(v).name
        LOG.debug("got status %s", name)
        self.Set(MPRIS_PLAYER_IFACE, "PlaybackStatus", name)

    def on_quit(self, v):
        LOG.critical("got quit signal")
        loop.quit()
        raise KeyboardInterrupt

    def on_track_change(self, v):
        LOG.info("got track change to %d", v)
        self.Set(MPRIS_PLAYER_IFACE, "Metadata", self.metadata(v))
        self.Set(MPRIS_PLAYER_IFACE, "CanGoNext", self.can_go_next)
        self.Set(MPRIS_PLAYER_IFACE, "CanGoPrevious", self.can_go_previous)

    def on_volume_change(self, v):
        vol = dbus.Double(v.get('master', 0) / 100.0)
        LOG.info("volume change to %f", vol)
        self._props[MPRIS_PLAYER_IFACE]["Volume"] = vol
        self.PropertiesChanged(MPRIS_PLAYER_IFACE, {"Volume": vol}, [])

    @property
    def has_track(self):
        return False

    @property
    def playback_status(self):
        value = self.cli.playback_status().wait().get_value()
        return Status(value).name

    @property
    def current_list_pos(self):
        playlist = self.cli.playlist_current_active().wait().get_value()
        playlist = playlist.encode('utf-8')
        res = self.cli.playlist_current_pos(playlist).wait().get_value()
        return res['position']

    @property
    def position(self):
        return self.cli.playback_playtime().wait().get_value() * 1000

    @property
    def can_go_previous(self):
        return self.current_list_pos > 0

    @property
    def can_go_next(self):
        playlist = self.cli.playlist_current_active().wait().get_value()
        playlist = playlist.encode('utf-8')
        entries = self.cli.playlist_list_entries(playlist).wait().get_value()
        return self.current_list_pos < len(entries) - 1

    @property
    def volume(self):
        LOG.debug("getting volume")
        try:
            volumes = self.cli.playback_volume_get().wait().get_value()
        except XmmsException:
            return dbus.types.Double(0)
        return dbus.types.Double(volumes.get("master", 0) / 100.0)

    @volume.setter
    def volume(self, value):
        new_val = value * 100
        LOG.info("Setting volume to %f", value)
        c_val = ctypes.c_int32(int(new_val))
        self.cli.playback_volume_set("master", c_val).wait()

    def metadata(self, current_id=None):
        if not current_id:
            current_id = self.cli.playback_current_id().wait().get_value()
        try:
            info = self.cli.medialib_get_info(current_id).wait().get_value()
        except XmmsException:
            return dbus.Dictionary(signature="sv")

        ret = dbus.Dictionary(
            {
                "mpris:trackid": int(info['id']['server']),
                "xesam:title": ' - '.join(info.get('title', {}).values()),
                "xesam:album": ' - '.join(info.get('album', {}).values()),
                "xesam:useCount": info['timesplayed']['server'],
                "xesam:genre": dbus.Array(
                    info.get('genre', {}).values(), signature="s"),
                # "xesam:url": info.get("url", {}).get("server", ""),
            },
            signature="sv")
        if 'duration' in info:
            ret['mpris:length'] = dbus.Int64(
                next(iter((info['duration'].values()))) * 1000)
        if not ret.get('xesam:album', None):
            ret['xesam:album'] = ' - '.join(info.get('channel', {}).values())
        return ret

    @dbus.service.method(dbus_interface=MPRIS_IFACE)
    def Quit(self):
        self.cli.quit().wait()

    @dbus.service.method(dbus_interface=MPRIS_IFACE)
    def Raise(self):
        pass

    @dbus.service.method(dbus_interface=MPRIS_PLAYER_IFACE)
    def Next(self):
        self.cli.playlist_set_next_rel(1).wait()
        self.cli.playback_tickle(1).wait()

    @dbus.service.method(dbus_interface=MPRIS_PLAYER_IFACE)
    def Previous(self):
        self.cli.playlist_set_next_rel(-1).wait()
        self.cli.playback_tickle(1).wait()

    @dbus.service.method(dbus_interface=MPRIS_PLAYER_IFACE)
    def Pause(self):
        self.cli.playback_pause().wait()

    @dbus.service.method(dbus_interface=MPRIS_PLAYER_IFACE)
    def PlayPause(self):
        if self._props[MPRIS_PLAYER_IFACE]['PlaybackStatus'] == 'Playing':
            self.Pause()
        else:
            self.Play()

    @dbus.service.method(dbus_interface=MPRIS_PLAYER_IFACE)
    def Stop(self):
        self.cli.playback_stop().wait()

    @dbus.service.method(dbus_interface=MPRIS_PLAYER_IFACE)
    def Play(self):
        self.cli.playback_start().wait()

    @dbus.service.method(dbus_interface=MPRIS_PLAYER_IFACE, in_signature='x')
    def Seek(self, offset):
        LOG.info("seek to %d", offset)
        offset_ms = int(offset / 1000)
        self.cli.playback_seek_ms_rel(offset_ms).wait()
        self.Seeked(self.position)

    @dbus.service.method(dbus_interface=MPRIS_PLAYER_IFACE, in_signature='ox')
    def SetPosition(self, track_id, position):
        LOG.info("set pos to %d", position)
        position_ms = int(position / 1000)
        self.cli.playback_seek_ms(position_ms).wait()
        self.Seeked(self.position)

    @dbus.service.method(dbus_interface=MPRIS_PLAYER_IFACE, in_signature='s')
    def OpenUri(self, uri):
        LOG.info("open uri to %s", uri)
        pass

    @dbus.service.method(
        dbus_interface=dbus.PROPERTIES_IFACE,
        in_signature='ss',
        out_signature='v')
    def Get(self, interface_name, property_name):
        return self.GetAll(interface_name)[property_name]

    @dbus.service.method(
        dbus_interface=dbus.PROPERTIES_IFACE,
        in_signature='s',
        out_signature='a{sv}')
    def GetAll(self, interface_name):
        try:
            return self._props[interface_name]
        except KeyError:
            raise dbus.exceptions.DBusException(
                'com.example.UnknownInterface',
                'The MediaPlayer object does not implement the {} interface'
                .format(interface_name))

    @dbus.service.method(
        dbus_interface=dbus.PROPERTIES_IFACE, in_signature='ssv')
    def Set(self, interface_name, property_name, new_value):
        if property_name == "Volume":
            self.volume = new_value
        self._props[interface_name][property_name] = new_value
        self.PropertiesChanged(interface_name, {property_name: new_value}, [])

    @dbus.service.signal(
        dbus_interface=dbus.PROPERTIES_IFACE, signature='sa{sv}as')
    def PropertiesChanged(self, interface_name, changed_properties,
                          invalidated_properties):
        pass

    @dbus.service.signal(dbus_interface=MPRIS_PLAYER_IFACE, signature='x')
    def Seeked(self, position):
        pass


if __name__ == '__main__':
    logging.basicConfig(
        level=LOG_LEVEL,
        format="%(asctime)-15s %(levelname)s [%(process)s] %(message)s",
        # filename="/tmp/xmms-mpris-{}".format(os.getlogin()),
    )
    DBusGMainLoop(set_as_default=True)
    m = MediaPlayer()
    loop = GLib.MainLoop()
    GLib.timeout_add(200, m.cli.io_handle)
    LOG.info("Starting glib mainloop")
    try:
        loop.run()
    except KeyboardInterrupt:
        LOG.exception("KeyboardInterrupt. quitting.")
        loop.quit()
    except:
        LOG.exception("global failure")
        loop.quit()
